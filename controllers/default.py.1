# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

# -------------------------------------------------------------------------
# This is a sample controller
# - index is the default action of any application
# - user is required for authentication and authorization
# - download is for downloading files uploaded in the db (does streaming)
# -------------------------------------------------------------------------



def test():
    from datetime import timedelta as timed
    #scheduler.queue_task('stop_current', pvars=dict(direzione='up'),start_time=request.now + timed(seconds=5))
    action=request.args[0]
    to_return=''
    if action=='a_up':
        #all_up()
        to_return='Tutto su'
    elif action=='a_dw':
        #all_dw()
        to_return='Tutto gi첫'
    elif action=='m_up':
        to_return='Mansarda su'
    elif action=='m_dw':
        to_return='Mansarda gi첫'
    elif action=='p_up':
        to_return='Primo piano su'
    elif action=='p_dw':
        to_return='Primo piano gi첫'
    elif action=='t_up':
        to_return='Piano terra su'
    elif action=='t_dw':
        to_return='Piano terra gi첫'
    elif action=='s_all':
		stop_all()
        to_return='Ferma tutto'    
    else:
        to_return='azione non definita'
    return "jQuery('#target').html('{}');".format(to_return)

def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    return dict(message=T('Welcome to web2py!'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
